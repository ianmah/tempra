/// <reference types="node" />
import { Asset, Task, FfmpegProfile } from './types/schema';
export declare const prodApiEndpoint = "https://livepeer.com";
declare type ExportTaskParams = NonNullable<Task['params']>['export'];
export declare type ApiAuthorization = {
    apiKey: string;
} | {
    jwt: string;
};
export default class VodApi {
    private client;
    constructor(auth?: ApiAuthorization, apiEndpoint?: string);
    getAsset(id: string): Promise<Asset>;
    getTask(id: string): Promise<Task>;
    requestUploadUrl(assetName: string): Promise<{
        url: string;
        asset: Asset;
        task: Task;
    }>;
    uploadFile(url: string, content: File | NodeJS.ReadableStream, mimeType?: string, reportProgress?: (progress: number) => void): Promise<unknown>;
    transcodeAsset(src: Asset, profile: FfmpegProfile, name?: string): Promise<{
        asset: Asset;
        task: Task;
    }>;
    exportAsset(id: string, params: ExportTaskParams): Promise<{
        task: Task;
    }>;
    waitTask(task: Task, reportProgress?: (progress: number) => void): Promise<Task>;
    private makeRequest;
}
export {};
